// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/criaplaylist/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	criaplaylist "github.com/yohanalexander/deezefy-music/entity/criaplaylist"
	reflect "reflect"
)

// MockCriaPlaylist is a mock of CriaPlaylist interface
type MockCriaPlaylist struct {
	ctrl     *gomock.Controller
	recorder *MockCriaPlaylistMockRecorder
}

// MockCriaPlaylistMockRecorder is the mock recorder for MockCriaPlaylist
type MockCriaPlaylistMockRecorder struct {
	mock *MockCriaPlaylist
}

// NewMockCriaPlaylist creates a new mock instance
func NewMockCriaPlaylist(ctrl *gomock.Controller) *MockCriaPlaylist {
	mock := &MockCriaPlaylist{ctrl: ctrl}
	mock.recorder = &MockCriaPlaylistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCriaPlaylist) EXPECT() *MockCriaPlaylistMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCriaPlaylist) Get(playlist, usuario string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", playlist, usuario)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCriaPlaylistMockRecorder) Get(playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCriaPlaylist)(nil).Get), playlist, usuario)
}

// GetByPlaylist mocks base method
func (m *MockCriaPlaylist) GetByPlaylist(playlist string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlist)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist
func (mr *MockCriaPlaylistMockRecorder) GetByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockCriaPlaylist)(nil).GetByPlaylist), playlist)
}

// GetByUsuario mocks base method
func (m *MockCriaPlaylist) GetByUsuario(usuario string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsuario", usuario)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsuario indicates an expected call of GetByUsuario
func (mr *MockCriaPlaylistMockRecorder) GetByUsuario(usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsuario", reflect.TypeOf((*MockCriaPlaylist)(nil).GetByUsuario), usuario)
}

// Search mocks base method
func (m *MockCriaPlaylist) Search(query string) ([]*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockCriaPlaylistMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCriaPlaylist)(nil).Search), query)
}

// List mocks base method
func (m *MockCriaPlaylist) List() ([]*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCriaPlaylistMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCriaPlaylist)(nil).List))
}

// Create mocks base method
func (m *MockCriaPlaylist) Create(e *criaplaylist.CriaPlaylist) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockCriaPlaylistMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCriaPlaylist)(nil).Create), e)
}

// Update mocks base method
func (m *MockCriaPlaylist) Update(e *criaplaylist.CriaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCriaPlaylistMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCriaPlaylist)(nil).Update), e)
}

// Delete mocks base method
func (m *MockCriaPlaylist) Delete(playlist, usuario string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", playlist, usuario)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCriaPlaylistMockRecorder) Delete(playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCriaPlaylist)(nil).Delete), playlist, usuario)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(playlist, usuario string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", playlist, usuario)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), playlist, usuario)
}

// GetByPlaylist mocks base method
func (m *MockRepository) GetByPlaylist(playlist string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlist)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist
func (mr *MockRepositoryMockRecorder) GetByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockRepository)(nil).GetByPlaylist), playlist)
}

// GetByUsuario mocks base method
func (m *MockRepository) GetByUsuario(usuario string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsuario", usuario)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsuario indicates an expected call of GetByUsuario
func (mr *MockRepositoryMockRecorder) GetByUsuario(usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsuario", reflect.TypeOf((*MockRepository)(nil).GetByUsuario), usuario)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *criaplaylist.CriaPlaylist) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *criaplaylist.CriaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(playlist, usuario string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", playlist, usuario)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), playlist, usuario)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetCriaPlaylist mocks base method
func (m *MockUseCase) GetCriaPlaylist(playlist, usuario string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCriaPlaylist", playlist, usuario)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCriaPlaylist indicates an expected call of GetCriaPlaylist
func (mr *MockUseCaseMockRecorder) GetCriaPlaylist(playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCriaPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetCriaPlaylist), playlist, usuario)
}

// GetCriaPlaylistByPlaylist mocks base method
func (m *MockUseCase) GetCriaPlaylistByPlaylist(playlist string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCriaPlaylistByPlaylist", playlist)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCriaPlaylistByPlaylist indicates an expected call of GetCriaPlaylistByPlaylist
func (mr *MockUseCaseMockRecorder) GetCriaPlaylistByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCriaPlaylistByPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetCriaPlaylistByPlaylist), playlist)
}

// GetCriaPlaylistByUsuario mocks base method
func (m *MockUseCase) GetCriaPlaylistByUsuario(usuario string) (*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCriaPlaylistByUsuario", usuario)
	ret0, _ := ret[0].(*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCriaPlaylistByUsuario indicates an expected call of GetCriaPlaylistByUsuario
func (mr *MockUseCaseMockRecorder) GetCriaPlaylistByUsuario(usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCriaPlaylistByUsuario", reflect.TypeOf((*MockUseCase)(nil).GetCriaPlaylistByUsuario), usuario)
}

// SearchCriaPlaylists mocks base method
func (m *MockUseCase) SearchCriaPlaylists(query string) ([]*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCriaPlaylists", query)
	ret0, _ := ret[0].([]*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCriaPlaylists indicates an expected call of SearchCriaPlaylists
func (mr *MockUseCaseMockRecorder) SearchCriaPlaylists(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCriaPlaylists", reflect.TypeOf((*MockUseCase)(nil).SearchCriaPlaylists), query)
}

// ListCriaPlaylists mocks base method
func (m *MockUseCase) ListCriaPlaylists() ([]*criaplaylist.CriaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCriaPlaylists")
	ret0, _ := ret[0].([]*criaplaylist.CriaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCriaPlaylists indicates an expected call of ListCriaPlaylists
func (mr *MockUseCaseMockRecorder) ListCriaPlaylists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCriaPlaylists", reflect.TypeOf((*MockUseCase)(nil).ListCriaPlaylists))
}

// CreateCriaPlaylist mocks base method
func (m *MockUseCase) CreateCriaPlaylist(datacriacao, playlist, usuario string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCriaPlaylist", datacriacao, playlist, usuario)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCriaPlaylist indicates an expected call of CreateCriaPlaylist
func (mr *MockUseCaseMockRecorder) CreateCriaPlaylist(datacriacao, playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCriaPlaylist", reflect.TypeOf((*MockUseCase)(nil).CreateCriaPlaylist), datacriacao, playlist, usuario)
}

// UpdateCriaPlaylist mocks base method
func (m *MockUseCase) UpdateCriaPlaylist(e *criaplaylist.CriaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCriaPlaylist", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCriaPlaylist indicates an expected call of UpdateCriaPlaylist
func (mr *MockUseCaseMockRecorder) UpdateCriaPlaylist(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCriaPlaylist", reflect.TypeOf((*MockUseCase)(nil).UpdateCriaPlaylist), e)
}

// DeleteCriaPlaylist mocks base method
func (m *MockUseCase) DeleteCriaPlaylist(playlist, usuario string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCriaPlaylist", playlist, usuario)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCriaPlaylist indicates an expected call of DeleteCriaPlaylist
func (mr *MockUseCaseMockRecorder) DeleteCriaPlaylist(playlist, usuario interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCriaPlaylist", reflect.TypeOf((*MockUseCase)(nil).DeleteCriaPlaylist), playlist, usuario)
}
