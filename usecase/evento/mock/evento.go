// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/evento/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	evento "github.com/yohanalexander/deezefy-music/entity/evento"
	reflect "reflect"
)

// MockEvento is a mock of Evento interface
type MockEvento struct {
	ctrl     *gomock.Controller
	recorder *MockEventoMockRecorder
}

// MockEventoMockRecorder is the mock recorder for MockEvento
type MockEventoMockRecorder struct {
	mock *MockEvento
}

// NewMockEvento creates a new mock instance
func NewMockEvento(ctrl *gomock.Controller) *MockEvento {
	mock := &MockEvento{ctrl: ctrl}
	mock.recorder = &MockEventoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvento) EXPECT() *MockEventoMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockEvento) Get(id int) (*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockEventoMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEvento)(nil).Get), id)
}

// Search mocks base method
func (m *MockEvento) Search(query string) ([]*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockEventoMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEvento)(nil).Search), query)
}

// List mocks base method
func (m *MockEvento) List() ([]*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockEventoMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEvento)(nil).List))
}

// Create mocks base method
func (m *MockEvento) Create(e *evento.Evento) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEventoMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEvento)(nil).Create), e)
}

// Update mocks base method
func (m *MockEvento) Update(e *evento.Evento) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEventoMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEvento)(nil).Update), e)
}

// Delete mocks base method
func (m *MockEvento) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEventoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEvento)(nil).Delete), id)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(id int) (*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *evento.Evento) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *evento.Evento) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetEvento mocks base method
func (m *MockUseCase) GetEvento(id int) (*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvento", id)
	ret0, _ := ret[0].(*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvento indicates an expected call of GetEvento
func (mr *MockUseCaseMockRecorder) GetEvento(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvento", reflect.TypeOf((*MockUseCase)(nil).GetEvento), id)
}

// SearchEventos mocks base method
func (m *MockUseCase) SearchEventos(query string) ([]*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEventos", query)
	ret0, _ := ret[0].([]*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventos indicates an expected call of SearchEventos
func (mr *MockUseCaseMockRecorder) SearchEventos(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventos", reflect.TypeOf((*MockUseCase)(nil).SearchEventos), query)
}

// ListEventos mocks base method
func (m *MockUseCase) ListEventos() ([]*evento.Evento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventos")
	ret0, _ := ret[0].([]*evento.Evento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventos indicates an expected call of ListEventos
func (mr *MockUseCaseMockRecorder) ListEventos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventos", reflect.TypeOf((*MockUseCase)(nil).ListEventos))
}

// CreateEvento mocks base method
func (m *MockUseCase) CreateEvento(usuario, nome string, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvento", usuario, nome, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvento indicates an expected call of CreateEvento
func (mr *MockUseCaseMockRecorder) CreateEvento(usuario, nome, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvento", reflect.TypeOf((*MockUseCase)(nil).CreateEvento), usuario, nome, id)
}

// UpdateEvento mocks base method
func (m *MockUseCase) UpdateEvento(e *evento.Evento) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvento", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvento indicates an expected call of UpdateEvento
func (mr *MockUseCaseMockRecorder) UpdateEvento(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvento", reflect.TypeOf((*MockUseCase)(nil).UpdateEvento), e)
}

// DeleteEvento mocks base method
func (m *MockUseCase) DeleteEvento(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvento", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvento indicates an expected call of DeleteEvento
func (mr *MockUseCaseMockRecorder) DeleteEvento(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvento", reflect.TypeOf((*MockUseCase)(nil).DeleteEvento), id)
}
