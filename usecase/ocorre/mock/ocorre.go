// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/ocorre/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	ocorre "github.com/yohanalexander/deezefy-music/entity/ocorre"
	reflect "reflect"
)

// MockOcorre is a mock of Ocorre interface
type MockOcorre struct {
	ctrl     *gomock.Controller
	recorder *MockOcorreMockRecorder
}

// MockOcorreMockRecorder is the mock recorder for MockOcorre
type MockOcorreMockRecorder struct {
	mock *MockOcorre
}

// NewMockOcorre creates a new mock instance
func NewMockOcorre(ctrl *gomock.Controller) *MockOcorre {
	mock := &MockOcorre{ctrl: ctrl}
	mock.recorder = &MockOcorreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOcorre) EXPECT() *MockOcorreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockOcorre) Get(artista, usuario string, local, evento int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artista, usuario, local, evento)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOcorreMockRecorder) Get(artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOcorre)(nil).Get), artista, usuario, local, evento)
}

// GetByLocal mocks base method
func (m *MockOcorre) GetByLocal(local int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLocal", local)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLocal indicates an expected call of GetByLocal
func (mr *MockOcorreMockRecorder) GetByLocal(local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLocal", reflect.TypeOf((*MockOcorre)(nil).GetByLocal), local)
}

// GetByEvento mocks base method
func (m *MockOcorre) GetByEvento(evento int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEvento", evento)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEvento indicates an expected call of GetByEvento
func (mr *MockOcorreMockRecorder) GetByEvento(evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEvento", reflect.TypeOf((*MockOcorre)(nil).GetByEvento), evento)
}

// GetByArtista mocks base method
func (m *MockOcorre) GetByArtista(artista string) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockOcorreMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockOcorre)(nil).GetByArtista), artista)
}

// Search mocks base method
func (m *MockOcorre) Search(query string) ([]*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockOcorreMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockOcorre)(nil).Search), query)
}

// List mocks base method
func (m *MockOcorre) List() ([]*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockOcorreMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOcorre)(nil).List))
}

// Create mocks base method
func (m *MockOcorre) Create(e *ocorre.Ocorre) (string, string, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// Create indicates an expected call of Create
func (mr *MockOcorreMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOcorre)(nil).Create), e)
}

// Update mocks base method
func (m *MockOcorre) Update(e *ocorre.Ocorre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockOcorreMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOcorre)(nil).Update), e)
}

// Delete mocks base method
func (m *MockOcorre) Delete(artista, usuario string, local, evento int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", artista, usuario, local, evento)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOcorreMockRecorder) Delete(artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOcorre)(nil).Delete), artista, usuario, local, evento)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(artista, usuario string, local, evento int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artista, usuario, local, evento)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), artista, usuario, local, evento)
}

// GetByLocal mocks base method
func (m *MockRepository) GetByLocal(local int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLocal", local)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLocal indicates an expected call of GetByLocal
func (mr *MockRepositoryMockRecorder) GetByLocal(local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLocal", reflect.TypeOf((*MockRepository)(nil).GetByLocal), local)
}

// GetByEvento mocks base method
func (m *MockRepository) GetByEvento(evento int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEvento", evento)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEvento indicates an expected call of GetByEvento
func (mr *MockRepositoryMockRecorder) GetByEvento(evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEvento", reflect.TypeOf((*MockRepository)(nil).GetByEvento), evento)
}

// GetByArtista mocks base method
func (m *MockRepository) GetByArtista(artista string) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockRepositoryMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockRepository)(nil).GetByArtista), artista)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *ocorre.Ocorre) (string, string, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *ocorre.Ocorre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(artista, usuario string, local, evento int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", artista, usuario, local, evento)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), artista, usuario, local, evento)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetOcorre mocks base method
func (m *MockUseCase) GetOcorre(artista, usuario string, local, evento int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOcorre", artista, usuario, local, evento)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOcorre indicates an expected call of GetOcorre
func (mr *MockUseCaseMockRecorder) GetOcorre(artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOcorre", reflect.TypeOf((*MockUseCase)(nil).GetOcorre), artista, usuario, local, evento)
}

// GetOcorreByLocal mocks base method
func (m *MockUseCase) GetOcorreByLocal(local int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOcorreByLocal", local)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOcorreByLocal indicates an expected call of GetOcorreByLocal
func (mr *MockUseCaseMockRecorder) GetOcorreByLocal(local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOcorreByLocal", reflect.TypeOf((*MockUseCase)(nil).GetOcorreByLocal), local)
}

// GetOcorreByEvento mocks base method
func (m *MockUseCase) GetOcorreByEvento(evento int) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOcorreByEvento", evento)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOcorreByEvento indicates an expected call of GetOcorreByEvento
func (mr *MockUseCaseMockRecorder) GetOcorreByEvento(evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOcorreByEvento", reflect.TypeOf((*MockUseCase)(nil).GetOcorreByEvento), evento)
}

// GetOcorreByArtista mocks base method
func (m *MockUseCase) GetOcorreByArtista(artista string) (*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOcorreByArtista", artista)
	ret0, _ := ret[0].(*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOcorreByArtista indicates an expected call of GetOcorreByArtista
func (mr *MockUseCaseMockRecorder) GetOcorreByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOcorreByArtista", reflect.TypeOf((*MockUseCase)(nil).GetOcorreByArtista), artista)
}

// SearchOcorres mocks base method
func (m *MockUseCase) SearchOcorres(query string) ([]*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOcorres", query)
	ret0, _ := ret[0].([]*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOcorres indicates an expected call of SearchOcorres
func (mr *MockUseCaseMockRecorder) SearchOcorres(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOcorres", reflect.TypeOf((*MockUseCase)(nil).SearchOcorres), query)
}

// ListOcorres mocks base method
func (m *MockUseCase) ListOcorres() ([]*ocorre.Ocorre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOcorres")
	ret0, _ := ret[0].([]*ocorre.Ocorre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOcorres indicates an expected call of ListOcorres
func (mr *MockUseCaseMockRecorder) ListOcorres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOcorres", reflect.TypeOf((*MockUseCase)(nil).ListOcorres))
}

// CreateOcorre mocks base method
func (m *MockUseCase) CreateOcorre(data, artista, usuario string, local, evento int) (string, string, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOcorre", data, artista, usuario, local, evento)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// CreateOcorre indicates an expected call of CreateOcorre
func (mr *MockUseCaseMockRecorder) CreateOcorre(data, artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOcorre", reflect.TypeOf((*MockUseCase)(nil).CreateOcorre), data, artista, usuario, local, evento)
}

// UpdateOcorre mocks base method
func (m *MockUseCase) UpdateOcorre(e *ocorre.Ocorre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOcorre", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOcorre indicates an expected call of UpdateOcorre
func (mr *MockUseCaseMockRecorder) UpdateOcorre(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOcorre", reflect.TypeOf((*MockUseCase)(nil).UpdateOcorre), e)
}

// DeleteOcorre mocks base method
func (m *MockUseCase) DeleteOcorre(artista, usuario string, local, evento int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOcorre", artista, usuario, local, evento)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOcorre indicates an expected call of DeleteOcorre
func (mr *MockUseCaseMockRecorder) DeleteOcorre(artista, usuario, local, evento interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOcorre", reflect.TypeOf((*MockUseCase)(nil).DeleteOcorre), artista, usuario, local, evento)
}
