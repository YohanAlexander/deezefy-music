// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/salvaalbum/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	salvaalbum "github.com/yohanalexander/deezefy-music/entity/salvaalbum"
	reflect "reflect"
)

// MockSalvaAlbum is a mock of SalvaAlbum interface
type MockSalvaAlbum struct {
	ctrl     *gomock.Controller
	recorder *MockSalvaAlbumMockRecorder
}

// MockSalvaAlbumMockRecorder is the mock recorder for MockSalvaAlbum
type MockSalvaAlbumMockRecorder struct {
	mock *MockSalvaAlbum
}

// NewMockSalvaAlbum creates a new mock instance
func NewMockSalvaAlbum(ctrl *gomock.Controller) *MockSalvaAlbum {
	mock := &MockSalvaAlbum{ctrl: ctrl}
	mock.recorder = &MockSalvaAlbumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSalvaAlbum) EXPECT() *MockSalvaAlbumMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSalvaAlbum) Get(album int, ouvinte, artista string) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", album, ouvinte, artista)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSalvaAlbumMockRecorder) Get(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSalvaAlbum)(nil).Get), album, ouvinte, artista)
}

// GetByAlbum mocks base method
func (m *MockSalvaAlbum) GetByAlbum(album int) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlbum", album)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlbum indicates an expected call of GetByAlbum
func (mr *MockSalvaAlbumMockRecorder) GetByAlbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlbum", reflect.TypeOf((*MockSalvaAlbum)(nil).GetByAlbum), album)
}

// GetByOuvinte mocks base method
func (m *MockSalvaAlbum) GetByOuvinte(ouvinte string) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockSalvaAlbumMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockSalvaAlbum)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockSalvaAlbum) Search(query string) ([]*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSalvaAlbumMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSalvaAlbum)(nil).Search), query)
}

// List mocks base method
func (m *MockSalvaAlbum) List() ([]*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSalvaAlbumMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSalvaAlbum)(nil).List))
}

// Create mocks base method
func (m *MockSalvaAlbum) Create(e *salvaalbum.SalvaAlbum) (int, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Create indicates an expected call of Create
func (mr *MockSalvaAlbumMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSalvaAlbum)(nil).Create), e)
}

// Update mocks base method
func (m *MockSalvaAlbum) Update(e *salvaalbum.SalvaAlbum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSalvaAlbumMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSalvaAlbum)(nil).Update), e)
}

// Delete mocks base method
func (m *MockSalvaAlbum) Delete(album int, ouvinte, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", album, ouvinte, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSalvaAlbumMockRecorder) Delete(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSalvaAlbum)(nil).Delete), album, ouvinte, artista)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(album int, ouvinte, artista string) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", album, ouvinte, artista)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), album, ouvinte, artista)
}

// GetByAlbum mocks base method
func (m *MockRepository) GetByAlbum(album int) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlbum", album)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlbum indicates an expected call of GetByAlbum
func (mr *MockRepositoryMockRecorder) GetByAlbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlbum", reflect.TypeOf((*MockRepository)(nil).GetByAlbum), album)
}

// GetByOuvinte mocks base method
func (m *MockRepository) GetByOuvinte(ouvinte string) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockRepositoryMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockRepository)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *salvaalbum.SalvaAlbum) (int, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *salvaalbum.SalvaAlbum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(album int, ouvinte, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", album, ouvinte, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), album, ouvinte, artista)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetSalvaAlbum mocks base method
func (m *MockUseCase) GetSalvaAlbum(album int, ouvinte, artista string) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalvaAlbum", album, ouvinte, artista)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalvaAlbum indicates an expected call of GetSalvaAlbum
func (mr *MockUseCaseMockRecorder) GetSalvaAlbum(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalvaAlbum", reflect.TypeOf((*MockUseCase)(nil).GetSalvaAlbum), album, ouvinte, artista)
}

// GetSalvaAlbumByalbum mocks base method
func (m *MockUseCase) GetSalvaAlbumByalbum(album int) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalvaAlbumByalbum", album)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalvaAlbumByalbum indicates an expected call of GetSalvaAlbumByalbum
func (mr *MockUseCaseMockRecorder) GetSalvaAlbumByalbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalvaAlbumByalbum", reflect.TypeOf((*MockUseCase)(nil).GetSalvaAlbumByalbum), album)
}

// GetSalvaAlbumByOuvinte mocks base method
func (m *MockUseCase) GetSalvaAlbumByOuvinte(ouvinte string) (*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalvaAlbumByOuvinte", ouvinte)
	ret0, _ := ret[0].(*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalvaAlbumByOuvinte indicates an expected call of GetSalvaAlbumByOuvinte
func (mr *MockUseCaseMockRecorder) GetSalvaAlbumByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalvaAlbumByOuvinte", reflect.TypeOf((*MockUseCase)(nil).GetSalvaAlbumByOuvinte), ouvinte)
}

// SearchSalvaAlbums mocks base method
func (m *MockUseCase) SearchSalvaAlbums(query string) ([]*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSalvaAlbums", query)
	ret0, _ := ret[0].([]*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSalvaAlbums indicates an expected call of SearchSalvaAlbums
func (mr *MockUseCaseMockRecorder) SearchSalvaAlbums(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSalvaAlbums", reflect.TypeOf((*MockUseCase)(nil).SearchSalvaAlbums), query)
}

// ListSalvaAlbums mocks base method
func (m *MockUseCase) ListSalvaAlbums() ([]*salvaalbum.SalvaAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalvaAlbums")
	ret0, _ := ret[0].([]*salvaalbum.SalvaAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSalvaAlbums indicates an expected call of ListSalvaAlbums
func (mr *MockUseCaseMockRecorder) ListSalvaAlbums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalvaAlbums", reflect.TypeOf((*MockUseCase)(nil).ListSalvaAlbums))
}

// CreateSalvaAlbum mocks base method
func (m *MockUseCase) CreateSalvaAlbum(album int, ouvinte, artista string) (int, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalvaAlbum", album, ouvinte, artista)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateSalvaAlbum indicates an expected call of CreateSalvaAlbum
func (mr *MockUseCaseMockRecorder) CreateSalvaAlbum(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalvaAlbum", reflect.TypeOf((*MockUseCase)(nil).CreateSalvaAlbum), album, ouvinte, artista)
}

// UpdateSalvaAlbum mocks base method
func (m *MockUseCase) UpdateSalvaAlbum(e *salvaalbum.SalvaAlbum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalvaAlbum", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalvaAlbum indicates an expected call of UpdateSalvaAlbum
func (mr *MockUseCaseMockRecorder) UpdateSalvaAlbum(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalvaAlbum", reflect.TypeOf((*MockUseCase)(nil).UpdateSalvaAlbum), e)
}

// DeleteSalvaAlbum mocks base method
func (m *MockUseCase) DeleteSalvaAlbum(album int, ouvinte, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalvaAlbum", album, ouvinte, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalvaAlbum indicates an expected call of DeleteSalvaAlbum
func (mr *MockUseCaseMockRecorder) DeleteSalvaAlbum(album, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalvaAlbum", reflect.TypeOf((*MockUseCase)(nil).DeleteSalvaAlbum), album, ouvinte, artista)
}
