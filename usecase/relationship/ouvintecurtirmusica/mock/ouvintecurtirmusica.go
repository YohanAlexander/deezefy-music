// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/relationship/ouvintecurtirmusica/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/yohanalexander/deezefy-music/entity"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Curtir mocks base method
func (m_2 *MockUseCase) Curtir(o *entity.Ouvinte, m *entity.Musica) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Curtir", o, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Curtir indicates an expected call of Curtir
func (mr *MockUseCaseMockRecorder) Curtir(o, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Curtir", reflect.TypeOf((*MockUseCase)(nil).Curtir), o, m)
}

// Descurtir mocks base method
func (m_2 *MockUseCase) Descurtir(o *entity.Ouvinte, m *entity.Musica) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Descurtir", o, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Descurtir indicates an expected call of Descurtir
func (mr *MockUseCaseMockRecorder) Descurtir(o, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descurtir", reflect.TypeOf((*MockUseCase)(nil).Descurtir), o, m)
}
