// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/relationship/ouvintesalvarplaylist/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/yohanalexander/deezefy-music/entity"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Salvar mocks base method
func (m *MockUseCase) Salvar(o *entity.Ouvinte, p *entity.Playlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Salvar", o, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Salvar indicates an expected call of Salvar
func (mr *MockUseCaseMockRecorder) Salvar(o, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Salvar", reflect.TypeOf((*MockUseCase)(nil).Salvar), o, p)
}

// Dessalvar mocks base method
func (m *MockUseCase) Dessalvar(o *entity.Ouvinte, p *entity.Playlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dessalvar", o, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dessalvar indicates an expected call of Dessalvar
func (mr *MockUseCaseMockRecorder) Dessalvar(o, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dessalvar", reflect.TypeOf((*MockUseCase)(nil).Dessalvar), o, p)
}
