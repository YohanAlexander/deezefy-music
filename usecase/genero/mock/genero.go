// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/genero/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	genero "github.com/yohanalexander/deezefy-music/entity/genero"
	reflect "reflect"
)

// MockGenero is a mock of Genero interface
type MockGenero struct {
	ctrl     *gomock.Controller
	recorder *MockGeneroMockRecorder
}

// MockGeneroMockRecorder is the mock recorder for MockGenero
type MockGeneroMockRecorder struct {
	mock *MockGenero
}

// NewMockGenero creates a new mock instance
func NewMockGenero(ctrl *gomock.Controller) *MockGenero {
	mock := &MockGenero{ctrl: ctrl}
	mock.recorder = &MockGeneroMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenero) EXPECT() *MockGeneroMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGenero) Get(nome string) (*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", nome)
	ret0, _ := ret[0].(*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGeneroMockRecorder) Get(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGenero)(nil).Get), nome)
}

// Search mocks base method
func (m *MockGenero) Search(query string) ([]*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockGeneroMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGenero)(nil).Search), query)
}

// List mocks base method
func (m *MockGenero) List() ([]*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockGeneroMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGenero)(nil).List))
}

// Create mocks base method
func (m *MockGenero) Create(e *genero.Genero) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockGeneroMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGenero)(nil).Create), e)
}

// Update mocks base method
func (m *MockGenero) Update(e *genero.Genero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGeneroMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGenero)(nil).Update), e)
}

// Delete mocks base method
func (m *MockGenero) Delete(nome string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", nome)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGeneroMockRecorder) Delete(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGenero)(nil).Delete), nome)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(nome string) (*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", nome)
	ret0, _ := ret[0].(*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), nome)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *genero.Genero) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *genero.Genero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(nome string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", nome)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), nome)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetGenero mocks base method
func (m *MockUseCase) GetGenero(nome string) (*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenero", nome)
	ret0, _ := ret[0].(*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenero indicates an expected call of GetGenero
func (mr *MockUseCaseMockRecorder) GetGenero(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenero", reflect.TypeOf((*MockUseCase)(nil).GetGenero), nome)
}

// SearchGeneros mocks base method
func (m *MockUseCase) SearchGeneros(query string) ([]*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGeneros", query)
	ret0, _ := ret[0].([]*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGeneros indicates an expected call of SearchGeneros
func (mr *MockUseCaseMockRecorder) SearchGeneros(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGeneros", reflect.TypeOf((*MockUseCase)(nil).SearchGeneros), query)
}

// ListGeneros mocks base method
func (m *MockUseCase) ListGeneros() ([]*genero.Genero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeneros")
	ret0, _ := ret[0].([]*genero.Genero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeneros indicates an expected call of ListGeneros
func (mr *MockUseCaseMockRecorder) ListGeneros() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeneros", reflect.TypeOf((*MockUseCase)(nil).ListGeneros))
}

// CreateGenero mocks base method
func (m *MockUseCase) CreateGenero(nome, estilo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenero", nome, estilo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenero indicates an expected call of CreateGenero
func (mr *MockUseCaseMockRecorder) CreateGenero(nome, estilo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenero", reflect.TypeOf((*MockUseCase)(nil).CreateGenero), nome, estilo)
}

// UpdateGenero mocks base method
func (m *MockUseCase) UpdateGenero(e *genero.Genero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenero", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenero indicates an expected call of UpdateGenero
func (mr *MockUseCaseMockRecorder) UpdateGenero(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenero", reflect.TypeOf((*MockUseCase)(nil).UpdateGenero), e)
}

// DeleteGenero mocks base method
func (m *MockUseCase) DeleteGenero(nome string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenero", nome)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenero indicates an expected call of DeleteGenero
func (mr *MockUseCaseMockRecorder) DeleteGenero(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenero", reflect.TypeOf((*MockUseCase)(nil).DeleteGenero), nome)
}
