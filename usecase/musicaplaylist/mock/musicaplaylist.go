// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/musicaplaylist/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	musicaplaylist "github.com/yohanalexander/deezefy-music/entity/musicaplaylist"
	reflect "reflect"
)

// MockMusicaPlaylist is a mock of MusicaPlaylist interface
type MockMusicaPlaylist struct {
	ctrl     *gomock.Controller
	recorder *MockMusicaPlaylistMockRecorder
}

// MockMusicaPlaylistMockRecorder is the mock recorder for MockMusicaPlaylist
type MockMusicaPlaylistMockRecorder struct {
	mock *MockMusicaPlaylist
}

// NewMockMusicaPlaylist creates a new mock instance
func NewMockMusicaPlaylist(ctrl *gomock.Controller) *MockMusicaPlaylist {
	mock := &MockMusicaPlaylist{ctrl: ctrl}
	mock.recorder = &MockMusicaPlaylistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMusicaPlaylist) EXPECT() *MockMusicaPlaylistMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMusicaPlaylist) Get(musica int, playlist string) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, playlist)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMusicaPlaylistMockRecorder) Get(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMusicaPlaylist)(nil).Get), musica, playlist)
}

// GetByMusica mocks base method
func (m *MockMusicaPlaylist) GetByMusica(musica int) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockMusicaPlaylistMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockMusicaPlaylist)(nil).GetByMusica), musica)
}

// GetByPlaylist mocks base method
func (m *MockMusicaPlaylist) GetByPlaylist(playlist string) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlist)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist
func (mr *MockMusicaPlaylistMockRecorder) GetByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockMusicaPlaylist)(nil).GetByPlaylist), playlist)
}

// Search mocks base method
func (m *MockMusicaPlaylist) Search(query string) ([]*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockMusicaPlaylistMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMusicaPlaylist)(nil).Search), query)
}

// List mocks base method
func (m *MockMusicaPlaylist) List() ([]*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMusicaPlaylistMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMusicaPlaylist)(nil).List))
}

// Create mocks base method
func (m *MockMusicaPlaylist) Create(e *musicaplaylist.MusicaPlaylist) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockMusicaPlaylistMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMusicaPlaylist)(nil).Create), e)
}

// Update mocks base method
func (m *MockMusicaPlaylist) Update(e *musicaplaylist.MusicaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMusicaPlaylistMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMusicaPlaylist)(nil).Update), e)
}

// Delete mocks base method
func (m *MockMusicaPlaylist) Delete(musica int, playlist string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, playlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMusicaPlaylistMockRecorder) Delete(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMusicaPlaylist)(nil).Delete), musica, playlist)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(musica int, playlist string) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, playlist)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), musica, playlist)
}

// GetByMusica mocks base method
func (m *MockRepository) GetByMusica(musica int) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockRepositoryMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockRepository)(nil).GetByMusica), musica)
}

// GetByPlaylist mocks base method
func (m *MockRepository) GetByPlaylist(playlist string) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlist)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist
func (mr *MockRepositoryMockRecorder) GetByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockRepository)(nil).GetByPlaylist), playlist)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *musicaplaylist.MusicaPlaylist) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *musicaplaylist.MusicaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(musica int, playlist string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, playlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), musica, playlist)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetMusicaPlaylist mocks base method
func (m *MockUseCase) GetMusicaPlaylist(musica int, playlist string) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicaPlaylist", musica, playlist)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicaPlaylist indicates an expected call of GetMusicaPlaylist
func (mr *MockUseCaseMockRecorder) GetMusicaPlaylist(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicaPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetMusicaPlaylist), musica, playlist)
}

// GetMusicaPlaylistByMusica mocks base method
func (m *MockUseCase) GetMusicaPlaylistByMusica(Musica int) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicaPlaylistByMusica", Musica)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicaPlaylistByMusica indicates an expected call of GetMusicaPlaylistByMusica
func (mr *MockUseCaseMockRecorder) GetMusicaPlaylistByMusica(Musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicaPlaylistByMusica", reflect.TypeOf((*MockUseCase)(nil).GetMusicaPlaylistByMusica), Musica)
}

// GetMusicaPlaylistByPlaylist mocks base method
func (m *MockUseCase) GetMusicaPlaylistByPlaylist(playlist string) (*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicaPlaylistByPlaylist", playlist)
	ret0, _ := ret[0].(*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicaPlaylistByPlaylist indicates an expected call of GetMusicaPlaylistByPlaylist
func (mr *MockUseCaseMockRecorder) GetMusicaPlaylistByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicaPlaylistByPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetMusicaPlaylistByPlaylist), playlist)
}

// SearchMusicaPlaylists mocks base method
func (m *MockUseCase) SearchMusicaPlaylists(query string) ([]*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMusicaPlaylists", query)
	ret0, _ := ret[0].([]*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMusicaPlaylists indicates an expected call of SearchMusicaPlaylists
func (mr *MockUseCaseMockRecorder) SearchMusicaPlaylists(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMusicaPlaylists", reflect.TypeOf((*MockUseCase)(nil).SearchMusicaPlaylists), query)
}

// ListMusicaPlaylists mocks base method
func (m *MockUseCase) ListMusicaPlaylists() ([]*musicaplaylist.MusicaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMusicaPlaylists")
	ret0, _ := ret[0].([]*musicaplaylist.MusicaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMusicaPlaylists indicates an expected call of ListMusicaPlaylists
func (mr *MockUseCaseMockRecorder) ListMusicaPlaylists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMusicaPlaylists", reflect.TypeOf((*MockUseCase)(nil).ListMusicaPlaylists))
}

// CreateMusicaPlaylist mocks base method
func (m *MockUseCase) CreateMusicaPlaylist(musica int, playlist string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMusicaPlaylist", musica, playlist)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMusicaPlaylist indicates an expected call of CreateMusicaPlaylist
func (mr *MockUseCaseMockRecorder) CreateMusicaPlaylist(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMusicaPlaylist", reflect.TypeOf((*MockUseCase)(nil).CreateMusicaPlaylist), musica, playlist)
}

// UpdateMusicaPlaylist mocks base method
func (m *MockUseCase) UpdateMusicaPlaylist(e *musicaplaylist.MusicaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicaPlaylist", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusicaPlaylist indicates an expected call of UpdateMusicaPlaylist
func (mr *MockUseCaseMockRecorder) UpdateMusicaPlaylist(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicaPlaylist", reflect.TypeOf((*MockUseCase)(nil).UpdateMusicaPlaylist), e)
}

// DeleteMusicaPlaylist mocks base method
func (m *MockUseCase) DeleteMusicaPlaylist(musica int, playlist string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusicaPlaylist", musica, playlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusicaPlaylist indicates an expected call of DeleteMusicaPlaylist
func (mr *MockUseCaseMockRecorder) DeleteMusicaPlaylist(musica, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusicaPlaylist", reflect.TypeOf((*MockUseCase)(nil).DeleteMusicaPlaylist), musica, playlist)
}
