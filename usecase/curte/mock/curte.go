// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/curte/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	curte "github.com/yohanalexander/deezefy-music/entity/curte"
	reflect "reflect"
)

// MockCurte is a mock of Curte interface
type MockCurte struct {
	ctrl     *gomock.Controller
	recorder *MockCurteMockRecorder
}

// MockCurteMockRecorder is the mock recorder for MockCurte
type MockCurteMockRecorder struct {
	mock *MockCurte
}

// NewMockCurte creates a new mock instance
func NewMockCurte(ctrl *gomock.Controller) *MockCurte {
	mock := &MockCurte{ctrl: ctrl}
	mock.recorder = &MockCurteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurte) EXPECT() *MockCurteMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCurte) Get(musica int, ouvinte string) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, ouvinte)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCurteMockRecorder) Get(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCurte)(nil).Get), musica, ouvinte)
}

// GetByMusica mocks base method
func (m *MockCurte) GetByMusica(musica int) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockCurteMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockCurte)(nil).GetByMusica), musica)
}

// GetByOuvinte mocks base method
func (m *MockCurte) GetByOuvinte(ouvinte string) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockCurteMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockCurte)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockCurte) Search(query string) ([]*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockCurteMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCurte)(nil).Search), query)
}

// List mocks base method
func (m *MockCurte) List() ([]*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCurteMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCurte)(nil).List))
}

// Create mocks base method
func (m *MockCurte) Create(e *curte.Curte) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockCurteMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurte)(nil).Create), e)
}

// Update mocks base method
func (m *MockCurte) Update(e *curte.Curte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCurteMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCurte)(nil).Update), e)
}

// Delete mocks base method
func (m *MockCurte) Delete(musica int, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCurteMockRecorder) Delete(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCurte)(nil).Delete), musica, ouvinte)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(musica int, ouvinte string) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, ouvinte)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), musica, ouvinte)
}

// GetByMusica mocks base method
func (m *MockRepository) GetByMusica(musica int) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockRepositoryMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockRepository)(nil).GetByMusica), musica)
}

// GetByOuvinte mocks base method
func (m *MockRepository) GetByOuvinte(ouvinte string) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockRepositoryMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockRepository)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *curte.Curte) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *curte.Curte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(musica int, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), musica, ouvinte)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetCurte mocks base method
func (m *MockUseCase) GetCurte(musica int, ouvinte string) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurte", musica, ouvinte)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurte indicates an expected call of GetCurte
func (mr *MockUseCaseMockRecorder) GetCurte(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurte", reflect.TypeOf((*MockUseCase)(nil).GetCurte), musica, ouvinte)
}

// GetCurteByMusica mocks base method
func (m *MockUseCase) GetCurteByMusica(Musica int) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurteByMusica", Musica)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurteByMusica indicates an expected call of GetCurteByMusica
func (mr *MockUseCaseMockRecorder) GetCurteByMusica(Musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurteByMusica", reflect.TypeOf((*MockUseCase)(nil).GetCurteByMusica), Musica)
}

// GetCurteByOuvinte mocks base method
func (m *MockUseCase) GetCurteByOuvinte(ouvinte string) (*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurteByOuvinte", ouvinte)
	ret0, _ := ret[0].(*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurteByOuvinte indicates an expected call of GetCurteByOuvinte
func (mr *MockUseCaseMockRecorder) GetCurteByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurteByOuvinte", reflect.TypeOf((*MockUseCase)(nil).GetCurteByOuvinte), ouvinte)
}

// SearchCurtes mocks base method
func (m *MockUseCase) SearchCurtes(query string) ([]*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCurtes", query)
	ret0, _ := ret[0].([]*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCurtes indicates an expected call of SearchCurtes
func (mr *MockUseCaseMockRecorder) SearchCurtes(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCurtes", reflect.TypeOf((*MockUseCase)(nil).SearchCurtes), query)
}

// ListCurtes mocks base method
func (m *MockUseCase) ListCurtes() ([]*curte.Curte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurtes")
	ret0, _ := ret[0].([]*curte.Curte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurtes indicates an expected call of ListCurtes
func (mr *MockUseCaseMockRecorder) ListCurtes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurtes", reflect.TypeOf((*MockUseCase)(nil).ListCurtes))
}

// CreateCurte mocks base method
func (m *MockUseCase) CreateCurte(musica int, ouvinte string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurte", musica, ouvinte)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCurte indicates an expected call of CreateCurte
func (mr *MockUseCaseMockRecorder) CreateCurte(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurte", reflect.TypeOf((*MockUseCase)(nil).CreateCurte), musica, ouvinte)
}

// UpdateCurte mocks base method
func (m *MockUseCase) UpdateCurte(e *curte.Curte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurte", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurte indicates an expected call of UpdateCurte
func (mr *MockUseCaseMockRecorder) UpdateCurte(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurte", reflect.TypeOf((*MockUseCase)(nil).UpdateCurte), e)
}

// DeleteCurte mocks base method
func (m *MockUseCase) DeleteCurte(musica int, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCurte", musica, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCurte indicates an expected call of DeleteCurte
func (mr *MockUseCaseMockRecorder) DeleteCurte(musica, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurte", reflect.TypeOf((*MockUseCase)(nil).DeleteCurte), musica, ouvinte)
}
