// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/salvaplaylist/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	salvaplaylist "github.com/yohanalexander/deezefy-music/entity/salvaplaylist"
	reflect "reflect"
)

// MockSalvaPlaylist is a mock of SalvaPlaylist interface
type MockSalvaPlaylist struct {
	ctrl     *gomock.Controller
	recorder *MockSalvaPlaylistMockRecorder
}

// MockSalvaPlaylistMockRecorder is the mock recorder for MockSalvaPlaylist
type MockSalvaPlaylistMockRecorder struct {
	mock *MockSalvaPlaylist
}

// NewMockSalvaPlaylist creates a new mock instance
func NewMockSalvaPlaylist(ctrl *gomock.Controller) *MockSalvaPlaylist {
	mock := &MockSalvaPlaylist{ctrl: ctrl}
	mock.recorder = &MockSalvaPlaylistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSalvaPlaylist) EXPECT() *MockSalvaPlaylistMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSalvaPlaylist) Get(playlist, ouvinte string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", playlist, ouvinte)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSalvaPlaylistMockRecorder) Get(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSalvaPlaylist)(nil).Get), playlist, ouvinte)
}

// GetByPlaylist mocks base method
func (m *MockSalvaPlaylist) GetByPlaylist(playlist string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlist)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist
func (mr *MockSalvaPlaylistMockRecorder) GetByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockSalvaPlaylist)(nil).GetByPlaylist), playlist)
}

// GetByOuvinte mocks base method
func (m *MockSalvaPlaylist) GetByOuvinte(ouvinte string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockSalvaPlaylistMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockSalvaPlaylist)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockSalvaPlaylist) Search(query string) ([]*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSalvaPlaylistMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSalvaPlaylist)(nil).Search), query)
}

// List mocks base method
func (m *MockSalvaPlaylist) List() ([]*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSalvaPlaylistMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSalvaPlaylist)(nil).List))
}

// Create mocks base method
func (m *MockSalvaPlaylist) Create(e *salvaplaylist.SalvaPlaylist) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockSalvaPlaylistMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSalvaPlaylist)(nil).Create), e)
}

// Update mocks base method
func (m *MockSalvaPlaylist) Update(e *salvaplaylist.SalvaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSalvaPlaylistMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSalvaPlaylist)(nil).Update), e)
}

// Delete mocks base method
func (m *MockSalvaPlaylist) Delete(playlist, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", playlist, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSalvaPlaylistMockRecorder) Delete(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSalvaPlaylist)(nil).Delete), playlist, ouvinte)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(playlist, ouvinte string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", playlist, ouvinte)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), playlist, ouvinte)
}

// GetByPlaylist mocks base method
func (m *MockRepository) GetByPlaylist(playlist string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlist)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist
func (mr *MockRepositoryMockRecorder) GetByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockRepository)(nil).GetByPlaylist), playlist)
}

// GetByOuvinte mocks base method
func (m *MockRepository) GetByOuvinte(ouvinte string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockRepositoryMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockRepository)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *salvaplaylist.SalvaPlaylist) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *salvaplaylist.SalvaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(playlist, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", playlist, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), playlist, ouvinte)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetSalvaPlaylist mocks base method
func (m *MockUseCase) GetSalvaPlaylist(playlist, ouvinte string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalvaPlaylist", playlist, ouvinte)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalvaPlaylist indicates an expected call of GetSalvaPlaylist
func (mr *MockUseCaseMockRecorder) GetSalvaPlaylist(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalvaPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetSalvaPlaylist), playlist, ouvinte)
}

// GetSalvaPlaylistByPlaylist mocks base method
func (m *MockUseCase) GetSalvaPlaylistByPlaylist(playlist string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalvaPlaylistByPlaylist", playlist)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalvaPlaylistByPlaylist indicates an expected call of GetSalvaPlaylistByPlaylist
func (mr *MockUseCaseMockRecorder) GetSalvaPlaylistByPlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalvaPlaylistByPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetSalvaPlaylistByPlaylist), playlist)
}

// GetSalvaPlaylistByOuvinte mocks base method
func (m *MockUseCase) GetSalvaPlaylistByOuvinte(ouvinte string) (*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalvaPlaylistByOuvinte", ouvinte)
	ret0, _ := ret[0].(*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalvaPlaylistByOuvinte indicates an expected call of GetSalvaPlaylistByOuvinte
func (mr *MockUseCaseMockRecorder) GetSalvaPlaylistByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalvaPlaylistByOuvinte", reflect.TypeOf((*MockUseCase)(nil).GetSalvaPlaylistByOuvinte), ouvinte)
}

// SearchSalvaPlaylists mocks base method
func (m *MockUseCase) SearchSalvaPlaylists(query string) ([]*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSalvaPlaylists", query)
	ret0, _ := ret[0].([]*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSalvaPlaylists indicates an expected call of SearchSalvaPlaylists
func (mr *MockUseCaseMockRecorder) SearchSalvaPlaylists(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSalvaPlaylists", reflect.TypeOf((*MockUseCase)(nil).SearchSalvaPlaylists), query)
}

// ListSalvaPlaylists mocks base method
func (m *MockUseCase) ListSalvaPlaylists() ([]*salvaplaylist.SalvaPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalvaPlaylists")
	ret0, _ := ret[0].([]*salvaplaylist.SalvaPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSalvaPlaylists indicates an expected call of ListSalvaPlaylists
func (mr *MockUseCaseMockRecorder) ListSalvaPlaylists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalvaPlaylists", reflect.TypeOf((*MockUseCase)(nil).ListSalvaPlaylists))
}

// CreateSalvaPlaylist mocks base method
func (m *MockUseCase) CreateSalvaPlaylist(playlist, ouvinte string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalvaPlaylist", playlist, ouvinte)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSalvaPlaylist indicates an expected call of CreateSalvaPlaylist
func (mr *MockUseCaseMockRecorder) CreateSalvaPlaylist(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalvaPlaylist", reflect.TypeOf((*MockUseCase)(nil).CreateSalvaPlaylist), playlist, ouvinte)
}

// UpdateSalvaPlaylist mocks base method
func (m *MockUseCase) UpdateSalvaPlaylist(e *salvaplaylist.SalvaPlaylist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalvaPlaylist", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalvaPlaylist indicates an expected call of UpdateSalvaPlaylist
func (mr *MockUseCaseMockRecorder) UpdateSalvaPlaylist(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalvaPlaylist", reflect.TypeOf((*MockUseCase)(nil).UpdateSalvaPlaylist), e)
}

// DeleteSalvaPlaylist mocks base method
func (m *MockUseCase) DeleteSalvaPlaylist(playlist, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalvaPlaylist", playlist, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalvaPlaylist indicates an expected call of DeleteSalvaPlaylist
func (mr *MockUseCaseMockRecorder) DeleteSalvaPlaylist(playlist, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalvaPlaylist", reflect.TypeOf((*MockUseCase)(nil).DeleteSalvaPlaylist), playlist, ouvinte)
}
