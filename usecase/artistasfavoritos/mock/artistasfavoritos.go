// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/artistasfavoritos/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	artistasfavoritos "github.com/yohanalexander/deezefy-music/entity/artistasfavoritos"
	reflect "reflect"
)

// MockArtistasFavoritos is a mock of ArtistasFavoritos interface
type MockArtistasFavoritos struct {
	ctrl     *gomock.Controller
	recorder *MockArtistasFavoritosMockRecorder
}

// MockArtistasFavoritosMockRecorder is the mock recorder for MockArtistasFavoritos
type MockArtistasFavoritosMockRecorder struct {
	mock *MockArtistasFavoritos
}

// NewMockArtistasFavoritos creates a new mock instance
func NewMockArtistasFavoritos(ctrl *gomock.Controller) *MockArtistasFavoritos {
	mock := &MockArtistasFavoritos{ctrl: ctrl}
	mock.recorder = &MockArtistasFavoritosMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtistasFavoritos) EXPECT() *MockArtistasFavoritosMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockArtistasFavoritos) Get(perfil int, ouvinte, artista string) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", perfil, ouvinte, artista)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockArtistasFavoritosMockRecorder) Get(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArtistasFavoritos)(nil).Get), perfil, ouvinte, artista)
}

// GetByPerfil mocks base method
func (m *MockArtistasFavoritos) GetByPerfil(perfil int) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPerfil", perfil)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPerfil indicates an expected call of GetByPerfil
func (mr *MockArtistasFavoritosMockRecorder) GetByPerfil(perfil interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPerfil", reflect.TypeOf((*MockArtistasFavoritos)(nil).GetByPerfil), perfil)
}

// GetByOuvinte mocks base method
func (m *MockArtistasFavoritos) GetByOuvinte(ouvinte string) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockArtistasFavoritosMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockArtistasFavoritos)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockArtistasFavoritos) Search(query string) ([]*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockArtistasFavoritosMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockArtistasFavoritos)(nil).Search), query)
}

// List mocks base method
func (m *MockArtistasFavoritos) List() ([]*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockArtistasFavoritosMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArtistasFavoritos)(nil).List))
}

// Create mocks base method
func (m *MockArtistasFavoritos) Create(e *artistasfavoritos.ArtistasFavoritos) (int, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Create indicates an expected call of Create
func (mr *MockArtistasFavoritosMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArtistasFavoritos)(nil).Create), e)
}

// Update mocks base method
func (m *MockArtistasFavoritos) Update(e *artistasfavoritos.ArtistasFavoritos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockArtistasFavoritosMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArtistasFavoritos)(nil).Update), e)
}

// Delete mocks base method
func (m *MockArtistasFavoritos) Delete(perfil int, ouvinte, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", perfil, ouvinte, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockArtistasFavoritosMockRecorder) Delete(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArtistasFavoritos)(nil).Delete), perfil, ouvinte, artista)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(perfil int, ouvinte, artista string) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", perfil, ouvinte, artista)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), perfil, ouvinte, artista)
}

// GetByPerfil mocks base method
func (m *MockRepository) GetByPerfil(perfil int) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPerfil", perfil)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPerfil indicates an expected call of GetByPerfil
func (mr *MockRepositoryMockRecorder) GetByPerfil(perfil interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPerfil", reflect.TypeOf((*MockRepository)(nil).GetByPerfil), perfil)
}

// GetByOuvinte mocks base method
func (m *MockRepository) GetByOuvinte(ouvinte string) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockRepositoryMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockRepository)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *artistasfavoritos.ArtistasFavoritos) (int, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *artistasfavoritos.ArtistasFavoritos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(perfil int, ouvinte, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", perfil, ouvinte, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), perfil, ouvinte, artista)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetArtistasFavoritos mocks base method
func (m *MockUseCase) GetArtistasFavoritos(perfil int, ouvinte, artista string) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistasFavoritos", perfil, ouvinte, artista)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistasFavoritos indicates an expected call of GetArtistasFavoritos
func (mr *MockUseCaseMockRecorder) GetArtistasFavoritos(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistasFavoritos", reflect.TypeOf((*MockUseCase)(nil).GetArtistasFavoritos), perfil, ouvinte, artista)
}

// GetArtistasFavoritosByPerfil mocks base method
func (m *MockUseCase) GetArtistasFavoritosByPerfil(perfil int) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistasFavoritosByPerfil", perfil)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistasFavoritosByPerfil indicates an expected call of GetArtistasFavoritosByPerfil
func (mr *MockUseCaseMockRecorder) GetArtistasFavoritosByPerfil(perfil interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistasFavoritosByPerfil", reflect.TypeOf((*MockUseCase)(nil).GetArtistasFavoritosByPerfil), perfil)
}

// GetArtistasFavoritosByOuvinte mocks base method
func (m *MockUseCase) GetArtistasFavoritosByOuvinte(ouvinte string) (*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistasFavoritosByOuvinte", ouvinte)
	ret0, _ := ret[0].(*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistasFavoritosByOuvinte indicates an expected call of GetArtistasFavoritosByOuvinte
func (mr *MockUseCaseMockRecorder) GetArtistasFavoritosByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistasFavoritosByOuvinte", reflect.TypeOf((*MockUseCase)(nil).GetArtistasFavoritosByOuvinte), ouvinte)
}

// SearchArtistasFavoritoss mocks base method
func (m *MockUseCase) SearchArtistasFavoritoss(query string) ([]*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArtistasFavoritoss", query)
	ret0, _ := ret[0].([]*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArtistasFavoritoss indicates an expected call of SearchArtistasFavoritoss
func (mr *MockUseCaseMockRecorder) SearchArtistasFavoritoss(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtistasFavoritoss", reflect.TypeOf((*MockUseCase)(nil).SearchArtistasFavoritoss), query)
}

// ListArtistasFavoritoss mocks base method
func (m *MockUseCase) ListArtistasFavoritoss() ([]*artistasfavoritos.ArtistasFavoritos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtistasFavoritoss")
	ret0, _ := ret[0].([]*artistasfavoritos.ArtistasFavoritos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtistasFavoritoss indicates an expected call of ListArtistasFavoritoss
func (mr *MockUseCaseMockRecorder) ListArtistasFavoritoss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtistasFavoritoss", reflect.TypeOf((*MockUseCase)(nil).ListArtistasFavoritoss))
}

// CreateArtistasFavoritos mocks base method
func (m *MockUseCase) CreateArtistasFavoritos(perfil int, ouvinte, artista string) (int, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtistasFavoritos", perfil, ouvinte, artista)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateArtistasFavoritos indicates an expected call of CreateArtistasFavoritos
func (mr *MockUseCaseMockRecorder) CreateArtistasFavoritos(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtistasFavoritos", reflect.TypeOf((*MockUseCase)(nil).CreateArtistasFavoritos), perfil, ouvinte, artista)
}

// UpdateArtistasFavoritos mocks base method
func (m *MockUseCase) UpdateArtistasFavoritos(e *artistasfavoritos.ArtistasFavoritos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtistasFavoritos", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtistasFavoritos indicates an expected call of UpdateArtistasFavoritos
func (mr *MockUseCaseMockRecorder) UpdateArtistasFavoritos(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtistasFavoritos", reflect.TypeOf((*MockUseCase)(nil).UpdateArtistasFavoritos), e)
}

// DeleteArtistasFavoritos mocks base method
func (m *MockUseCase) DeleteArtistasFavoritos(perfil int, ouvinte, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtistasFavoritos", perfil, ouvinte, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtistasFavoritos indicates an expected call of DeleteArtistasFavoritos
func (mr *MockUseCaseMockRecorder) DeleteArtistasFavoritos(perfil, ouvinte, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtistasFavoritos", reflect.TypeOf((*MockUseCase)(nil).DeleteArtistasFavoritos), perfil, ouvinte, artista)
}
