// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/artistagenero/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	artistagenero "github.com/yohanalexander/deezefy-music/entity/artistagenero"
	reflect "reflect"
)

// MockArtistaGenero is a mock of ArtistaGenero interface
type MockArtistaGenero struct {
	ctrl     *gomock.Controller
	recorder *MockArtistaGeneroMockRecorder
}

// MockArtistaGeneroMockRecorder is the mock recorder for MockArtistaGenero
type MockArtistaGeneroMockRecorder struct {
	mock *MockArtistaGenero
}

// NewMockArtistaGenero creates a new mock instance
func NewMockArtistaGenero(ctrl *gomock.Controller) *MockArtistaGenero {
	mock := &MockArtistaGenero{ctrl: ctrl}
	mock.recorder = &MockArtistaGeneroMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtistaGenero) EXPECT() *MockArtistaGeneroMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockArtistaGenero) Get(artista, genero string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artista, genero)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockArtistaGeneroMockRecorder) Get(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArtistaGenero)(nil).Get), artista, genero)
}

// GetByArtista mocks base method
func (m *MockArtistaGenero) GetByArtista(artista string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockArtistaGeneroMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockArtistaGenero)(nil).GetByArtista), artista)
}

// GetByGenero mocks base method
func (m *MockArtistaGenero) GetByGenero(genero string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGenero", genero)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGenero indicates an expected call of GetByGenero
func (mr *MockArtistaGeneroMockRecorder) GetByGenero(genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGenero", reflect.TypeOf((*MockArtistaGenero)(nil).GetByGenero), genero)
}

// Search mocks base method
func (m *MockArtistaGenero) Search(query string) ([]*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockArtistaGeneroMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockArtistaGenero)(nil).Search), query)
}

// List mocks base method
func (m *MockArtistaGenero) List() ([]*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockArtistaGeneroMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArtistaGenero)(nil).List))
}

// Create mocks base method
func (m *MockArtistaGenero) Create(e *artistagenero.ArtistaGenero) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockArtistaGeneroMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArtistaGenero)(nil).Create), e)
}

// Update mocks base method
func (m *MockArtistaGenero) Update(e *artistagenero.ArtistaGenero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockArtistaGeneroMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArtistaGenero)(nil).Update), e)
}

// Delete mocks base method
func (m *MockArtistaGenero) Delete(artista, genero string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", artista, genero)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockArtistaGeneroMockRecorder) Delete(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArtistaGenero)(nil).Delete), artista, genero)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(artista, genero string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artista, genero)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), artista, genero)
}

// GetByArtista mocks base method
func (m *MockRepository) GetByArtista(artista string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockRepositoryMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockRepository)(nil).GetByArtista), artista)
}

// GetByGenero mocks base method
func (m *MockRepository) GetByGenero(genero string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGenero", genero)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGenero indicates an expected call of GetByGenero
func (mr *MockRepositoryMockRecorder) GetByGenero(genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGenero", reflect.TypeOf((*MockRepository)(nil).GetByGenero), genero)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *artistagenero.ArtistaGenero) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *artistagenero.ArtistaGenero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(artista, genero string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", artista, genero)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), artista, genero)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetArtistaGenero mocks base method
func (m *MockUseCase) GetArtistaGenero(artista, genero string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistaGenero", artista, genero)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistaGenero indicates an expected call of GetArtistaGenero
func (mr *MockUseCaseMockRecorder) GetArtistaGenero(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistaGenero", reflect.TypeOf((*MockUseCase)(nil).GetArtistaGenero), artista, genero)
}

// GetArtistaGeneroByArtista mocks base method
func (m *MockUseCase) GetArtistaGeneroByArtista(artista string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistaGeneroByArtista", artista)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistaGeneroByArtista indicates an expected call of GetArtistaGeneroByArtista
func (mr *MockUseCaseMockRecorder) GetArtistaGeneroByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistaGeneroByArtista", reflect.TypeOf((*MockUseCase)(nil).GetArtistaGeneroByArtista), artista)
}

// GetArtistaGeneroBygenero mocks base method
func (m *MockUseCase) GetArtistaGeneroBygenero(genero string) (*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistaGeneroBygenero", genero)
	ret0, _ := ret[0].(*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistaGeneroBygenero indicates an expected call of GetArtistaGeneroBygenero
func (mr *MockUseCaseMockRecorder) GetArtistaGeneroBygenero(genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistaGeneroBygenero", reflect.TypeOf((*MockUseCase)(nil).GetArtistaGeneroBygenero), genero)
}

// SearchArtistaGeneros mocks base method
func (m *MockUseCase) SearchArtistaGeneros(query string) ([]*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArtistaGeneros", query)
	ret0, _ := ret[0].([]*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArtistaGeneros indicates an expected call of SearchArtistaGeneros
func (mr *MockUseCaseMockRecorder) SearchArtistaGeneros(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtistaGeneros", reflect.TypeOf((*MockUseCase)(nil).SearchArtistaGeneros), query)
}

// ListArtistaGeneros mocks base method
func (m *MockUseCase) ListArtistaGeneros() ([]*artistagenero.ArtistaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtistaGeneros")
	ret0, _ := ret[0].([]*artistagenero.ArtistaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtistaGeneros indicates an expected call of ListArtistaGeneros
func (mr *MockUseCaseMockRecorder) ListArtistaGeneros() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtistaGeneros", reflect.TypeOf((*MockUseCase)(nil).ListArtistaGeneros))
}

// CreateArtistaGenero mocks base method
func (m *MockUseCase) CreateArtistaGenero(artista, genero string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtistaGenero", artista, genero)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateArtistaGenero indicates an expected call of CreateArtistaGenero
func (mr *MockUseCaseMockRecorder) CreateArtistaGenero(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtistaGenero", reflect.TypeOf((*MockUseCase)(nil).CreateArtistaGenero), artista, genero)
}

// UpdateArtistaGenero mocks base method
func (m *MockUseCase) UpdateArtistaGenero(e *artistagenero.ArtistaGenero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtistaGenero", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtistaGenero indicates an expected call of UpdateArtistaGenero
func (mr *MockUseCaseMockRecorder) UpdateArtistaGenero(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtistaGenero", reflect.TypeOf((*MockUseCase)(nil).UpdateArtistaGenero), e)
}

// DeleteArtistaGenero mocks base method
func (m *MockUseCase) DeleteArtistaGenero(artista, genero string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtistaGenero", artista, genero)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtistaGenero indicates an expected call of DeleteArtistaGenero
func (mr *MockUseCaseMockRecorder) DeleteArtistaGenero(artista, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtistaGenero", reflect.TypeOf((*MockUseCase)(nil).DeleteArtistaGenero), artista, genero)
}
