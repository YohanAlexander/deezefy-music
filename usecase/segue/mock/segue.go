// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/segue/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	segue "github.com/yohanalexander/deezefy-music/entity/segue"
	reflect "reflect"
)

// MockSegue is a mock of Segue interface
type MockSegue struct {
	ctrl     *gomock.Controller
	recorder *MockSegueMockRecorder
}

// MockSegueMockRecorder is the mock recorder for MockSegue
type MockSegueMockRecorder struct {
	mock *MockSegue
}

// NewMockSegue creates a new mock instance
func NewMockSegue(ctrl *gomock.Controller) *MockSegue {
	mock := &MockSegue{ctrl: ctrl}
	mock.recorder = &MockSegueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSegue) EXPECT() *MockSegueMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSegue) Get(artista, ouvinte string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artista, ouvinte)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSegueMockRecorder) Get(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegue)(nil).Get), artista, ouvinte)
}

// GetByArtista mocks base method
func (m *MockSegue) GetByArtista(artista string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockSegueMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockSegue)(nil).GetByArtista), artista)
}

// GetByOuvinte mocks base method
func (m *MockSegue) GetByOuvinte(ouvinte string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockSegueMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockSegue)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockSegue) Search(query string) ([]*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSegueMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSegue)(nil).Search), query)
}

// List mocks base method
func (m *MockSegue) List() ([]*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSegueMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSegue)(nil).List))
}

// Create mocks base method
func (m *MockSegue) Create(e *segue.Segue) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockSegueMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSegue)(nil).Create), e)
}

// Update mocks base method
func (m *MockSegue) Update(e *segue.Segue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSegueMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSegue)(nil).Update), e)
}

// Delete mocks base method
func (m *MockSegue) Delete(artista, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", artista, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSegueMockRecorder) Delete(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSegue)(nil).Delete), artista, ouvinte)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(artista, ouvinte string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artista, ouvinte)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), artista, ouvinte)
}

// GetByArtista mocks base method
func (m *MockRepository) GetByArtista(artista string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockRepositoryMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockRepository)(nil).GetByArtista), artista)
}

// GetByOuvinte mocks base method
func (m *MockRepository) GetByOuvinte(ouvinte string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOuvinte", ouvinte)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOuvinte indicates an expected call of GetByOuvinte
func (mr *MockRepositoryMockRecorder) GetByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOuvinte", reflect.TypeOf((*MockRepository)(nil).GetByOuvinte), ouvinte)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *segue.Segue) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *segue.Segue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(artista, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", artista, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), artista, ouvinte)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetSegue mocks base method
func (m *MockUseCase) GetSegue(artista, ouvinte string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegue", artista, ouvinte)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegue indicates an expected call of GetSegue
func (mr *MockUseCaseMockRecorder) GetSegue(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegue", reflect.TypeOf((*MockUseCase)(nil).GetSegue), artista, ouvinte)
}

// GetSegueByArtista mocks base method
func (m *MockUseCase) GetSegueByArtista(artista string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegueByArtista", artista)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegueByArtista indicates an expected call of GetSegueByArtista
func (mr *MockUseCaseMockRecorder) GetSegueByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegueByArtista", reflect.TypeOf((*MockUseCase)(nil).GetSegueByArtista), artista)
}

// GetSegueByOuvinte mocks base method
func (m *MockUseCase) GetSegueByOuvinte(ouvinte string) (*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegueByOuvinte", ouvinte)
	ret0, _ := ret[0].(*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegueByOuvinte indicates an expected call of GetSegueByOuvinte
func (mr *MockUseCaseMockRecorder) GetSegueByOuvinte(ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegueByOuvinte", reflect.TypeOf((*MockUseCase)(nil).GetSegueByOuvinte), ouvinte)
}

// SearchSegues mocks base method
func (m *MockUseCase) SearchSegues(query string) ([]*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSegues", query)
	ret0, _ := ret[0].([]*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSegues indicates an expected call of SearchSegues
func (mr *MockUseCaseMockRecorder) SearchSegues(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSegues", reflect.TypeOf((*MockUseCase)(nil).SearchSegues), query)
}

// ListSegues mocks base method
func (m *MockUseCase) ListSegues() ([]*segue.Segue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegues")
	ret0, _ := ret[0].([]*segue.Segue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegues indicates an expected call of ListSegues
func (mr *MockUseCaseMockRecorder) ListSegues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegues", reflect.TypeOf((*MockUseCase)(nil).ListSegues))
}

// CreateSegue mocks base method
func (m *MockUseCase) CreateSegue(artista, ouvinte string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegue", artista, ouvinte)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSegue indicates an expected call of CreateSegue
func (mr *MockUseCaseMockRecorder) CreateSegue(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegue", reflect.TypeOf((*MockUseCase)(nil).CreateSegue), artista, ouvinte)
}

// UpdateSegue mocks base method
func (m *MockUseCase) UpdateSegue(e *segue.Segue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegue", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegue indicates an expected call of UpdateSegue
func (mr *MockUseCaseMockRecorder) UpdateSegue(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegue", reflect.TypeOf((*MockUseCase)(nil).UpdateSegue), e)
}

// DeleteSegue mocks base method
func (m *MockUseCase) DeleteSegue(artista, ouvinte string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegue", artista, ouvinte)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegue indicates an expected call of DeleteSegue
func (mr *MockUseCaseMockRecorder) DeleteSegue(artista, ouvinte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegue", reflect.TypeOf((*MockUseCase)(nil).DeleteSegue), artista, ouvinte)
}
