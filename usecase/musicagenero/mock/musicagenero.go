// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/musicagenero/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	musicagenero "github.com/yohanalexander/deezefy-music/entity/musicagenero"
	reflect "reflect"
)

// MockMusicaGenero is a mock of MusicaGenero interface
type MockMusicaGenero struct {
	ctrl     *gomock.Controller
	recorder *MockMusicaGeneroMockRecorder
}

// MockMusicaGeneroMockRecorder is the mock recorder for MockMusicaGenero
type MockMusicaGeneroMockRecorder struct {
	mock *MockMusicaGenero
}

// NewMockMusicaGenero creates a new mock instance
func NewMockMusicaGenero(ctrl *gomock.Controller) *MockMusicaGenero {
	mock := &MockMusicaGenero{ctrl: ctrl}
	mock.recorder = &MockMusicaGeneroMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMusicaGenero) EXPECT() *MockMusicaGeneroMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMusicaGenero) Get(musica int, genero string) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, genero)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMusicaGeneroMockRecorder) Get(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMusicaGenero)(nil).Get), musica, genero)
}

// GetByMusica mocks base method
func (m *MockMusicaGenero) GetByMusica(musica int) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockMusicaGeneroMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockMusicaGenero)(nil).GetByMusica), musica)
}

// GetByGenero mocks base method
func (m *MockMusicaGenero) GetByGenero(genero string) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGenero", genero)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGenero indicates an expected call of GetByGenero
func (mr *MockMusicaGeneroMockRecorder) GetByGenero(genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGenero", reflect.TypeOf((*MockMusicaGenero)(nil).GetByGenero), genero)
}

// Search mocks base method
func (m *MockMusicaGenero) Search(query string) ([]*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockMusicaGeneroMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMusicaGenero)(nil).Search), query)
}

// List mocks base method
func (m *MockMusicaGenero) List() ([]*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMusicaGeneroMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMusicaGenero)(nil).List))
}

// Create mocks base method
func (m *MockMusicaGenero) Create(e *musicagenero.MusicaGenero) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockMusicaGeneroMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMusicaGenero)(nil).Create), e)
}

// Update mocks base method
func (m *MockMusicaGenero) Update(e *musicagenero.MusicaGenero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMusicaGeneroMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMusicaGenero)(nil).Update), e)
}

// Delete mocks base method
func (m *MockMusicaGenero) Delete(musica int, genero string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, genero)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMusicaGeneroMockRecorder) Delete(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMusicaGenero)(nil).Delete), musica, genero)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(musica int, genero string) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, genero)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), musica, genero)
}

// GetByMusica mocks base method
func (m *MockRepository) GetByMusica(musica int) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockRepositoryMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockRepository)(nil).GetByMusica), musica)
}

// GetByGenero mocks base method
func (m *MockRepository) GetByGenero(genero string) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGenero", genero)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGenero indicates an expected call of GetByGenero
func (mr *MockRepositoryMockRecorder) GetByGenero(genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGenero", reflect.TypeOf((*MockRepository)(nil).GetByGenero), genero)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *musicagenero.MusicaGenero) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *musicagenero.MusicaGenero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(musica int, genero string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, genero)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), musica, genero)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetMusicaGenero mocks base method
func (m *MockUseCase) GetMusicaGenero(musica int, genero string) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicaGenero", musica, genero)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicaGenero indicates an expected call of GetMusicaGenero
func (mr *MockUseCaseMockRecorder) GetMusicaGenero(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicaGenero", reflect.TypeOf((*MockUseCase)(nil).GetMusicaGenero), musica, genero)
}

// GetMusicaGeneroByMusica mocks base method
func (m *MockUseCase) GetMusicaGeneroByMusica(Musica int) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicaGeneroByMusica", Musica)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicaGeneroByMusica indicates an expected call of GetMusicaGeneroByMusica
func (mr *MockUseCaseMockRecorder) GetMusicaGeneroByMusica(Musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicaGeneroByMusica", reflect.TypeOf((*MockUseCase)(nil).GetMusicaGeneroByMusica), Musica)
}

// GetMusicaGeneroByGenero mocks base method
func (m *MockUseCase) GetMusicaGeneroByGenero(genero string) (*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicaGeneroByGenero", genero)
	ret0, _ := ret[0].(*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicaGeneroByGenero indicates an expected call of GetMusicaGeneroByGenero
func (mr *MockUseCaseMockRecorder) GetMusicaGeneroByGenero(genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicaGeneroByGenero", reflect.TypeOf((*MockUseCase)(nil).GetMusicaGeneroByGenero), genero)
}

// SearchMusicaGeneros mocks base method
func (m *MockUseCase) SearchMusicaGeneros(query string) ([]*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMusicaGeneros", query)
	ret0, _ := ret[0].([]*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMusicaGeneros indicates an expected call of SearchMusicaGeneros
func (mr *MockUseCaseMockRecorder) SearchMusicaGeneros(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMusicaGeneros", reflect.TypeOf((*MockUseCase)(nil).SearchMusicaGeneros), query)
}

// ListMusicaGeneros mocks base method
func (m *MockUseCase) ListMusicaGeneros() ([]*musicagenero.MusicaGenero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMusicaGeneros")
	ret0, _ := ret[0].([]*musicagenero.MusicaGenero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMusicaGeneros indicates an expected call of ListMusicaGeneros
func (mr *MockUseCaseMockRecorder) ListMusicaGeneros() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMusicaGeneros", reflect.TypeOf((*MockUseCase)(nil).ListMusicaGeneros))
}

// CreateMusicaGenero mocks base method
func (m *MockUseCase) CreateMusicaGenero(musica int, genero string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMusicaGenero", musica, genero)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMusicaGenero indicates an expected call of CreateMusicaGenero
func (mr *MockUseCaseMockRecorder) CreateMusicaGenero(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMusicaGenero", reflect.TypeOf((*MockUseCase)(nil).CreateMusicaGenero), musica, genero)
}

// UpdateMusicaGenero mocks base method
func (m *MockUseCase) UpdateMusicaGenero(e *musicagenero.MusicaGenero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicaGenero", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusicaGenero indicates an expected call of UpdateMusicaGenero
func (mr *MockUseCaseMockRecorder) UpdateMusicaGenero(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicaGenero", reflect.TypeOf((*MockUseCase)(nil).UpdateMusicaGenero), e)
}

// DeleteMusicaGenero mocks base method
func (m *MockUseCase) DeleteMusicaGenero(musica int, genero string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusicaGenero", musica, genero)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusicaGenero indicates an expected call of DeleteMusicaGenero
func (mr *MockUseCaseMockRecorder) DeleteMusicaGenero(musica, genero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusicaGenero", reflect.TypeOf((*MockUseCase)(nil).DeleteMusicaGenero), musica, genero)
}
