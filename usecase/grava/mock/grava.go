// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/grava/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	grava "github.com/yohanalexander/deezefy-music/entity/grava"
	reflect "reflect"
)

// MockGrava is a mock of Grava interface
type MockGrava struct {
	ctrl     *gomock.Controller
	recorder *MockGravaMockRecorder
}

// MockGravaMockRecorder is the mock recorder for MockGrava
type MockGravaMockRecorder struct {
	mock *MockGrava
}

// NewMockGrava creates a new mock instance
func NewMockGrava(ctrl *gomock.Controller) *MockGrava {
	mock := &MockGrava{ctrl: ctrl}
	mock.recorder = &MockGravaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGrava) EXPECT() *MockGravaMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGrava) Get(musica int, artista string) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, artista)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGravaMockRecorder) Get(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGrava)(nil).Get), musica, artista)
}

// GetByMusica mocks base method
func (m *MockGrava) GetByMusica(musica int) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockGravaMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockGrava)(nil).GetByMusica), musica)
}

// GetByArtista mocks base method
func (m *MockGrava) GetByArtista(artista string) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockGravaMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockGrava)(nil).GetByArtista), artista)
}

// Search mocks base method
func (m *MockGrava) Search(query string) ([]*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockGravaMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGrava)(nil).Search), query)
}

// List mocks base method
func (m *MockGrava) List() ([]*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockGravaMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGrava)(nil).List))
}

// Create mocks base method
func (m *MockGrava) Create(e *grava.Grava) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockGravaMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGrava)(nil).Create), e)
}

// Update mocks base method
func (m *MockGrava) Update(e *grava.Grava) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGravaMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGrava)(nil).Update), e)
}

// Delete mocks base method
func (m *MockGrava) Delete(musica int, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGravaMockRecorder) Delete(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGrava)(nil).Delete), musica, artista)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(musica int, artista string) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", musica, artista)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), musica, artista)
}

// GetByMusica mocks base method
func (m *MockRepository) GetByMusica(musica int) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMusica", musica)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMusica indicates an expected call of GetByMusica
func (mr *MockRepositoryMockRecorder) GetByMusica(musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMusica", reflect.TypeOf((*MockRepository)(nil).GetByMusica), musica)
}

// GetByArtista mocks base method
func (m *MockRepository) GetByArtista(artista string) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtista", artista)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtista indicates an expected call of GetByArtista
func (mr *MockRepositoryMockRecorder) GetByArtista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtista", reflect.TypeOf((*MockRepository)(nil).GetByArtista), artista)
}

// Search mocks base method
func (m *MockRepository) Search(query string) ([]*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), query)
}

// List mocks base method
func (m *MockRepository) List() ([]*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Create mocks base method
func (m *MockRepository) Create(e *grava.Grava) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Update mocks base method
func (m *MockRepository) Update(e *grava.Grava) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// Delete mocks base method
func (m *MockRepository) Delete(musica int, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", musica, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), musica, artista)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetGrava mocks base method
func (m *MockUseCase) GetGrava(musica int, artista string) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrava", musica, artista)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrava indicates an expected call of GetGrava
func (mr *MockUseCaseMockRecorder) GetGrava(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrava", reflect.TypeOf((*MockUseCase)(nil).GetGrava), musica, artista)
}

// GetGravaByMusica mocks base method
func (m *MockUseCase) GetGravaByMusica(Musica int) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGravaByMusica", Musica)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGravaByMusica indicates an expected call of GetGravaByMusica
func (mr *MockUseCaseMockRecorder) GetGravaByMusica(Musica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGravaByMusica", reflect.TypeOf((*MockUseCase)(nil).GetGravaByMusica), Musica)
}

// GetGravaByartista mocks base method
func (m *MockUseCase) GetGravaByartista(artista string) (*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGravaByartista", artista)
	ret0, _ := ret[0].(*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGravaByartista indicates an expected call of GetGravaByartista
func (mr *MockUseCaseMockRecorder) GetGravaByartista(artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGravaByartista", reflect.TypeOf((*MockUseCase)(nil).GetGravaByartista), artista)
}

// SearchGravas mocks base method
func (m *MockUseCase) SearchGravas(query string) ([]*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGravas", query)
	ret0, _ := ret[0].([]*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGravas indicates an expected call of SearchGravas
func (mr *MockUseCaseMockRecorder) SearchGravas(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGravas", reflect.TypeOf((*MockUseCase)(nil).SearchGravas), query)
}

// ListGravas mocks base method
func (m *MockUseCase) ListGravas() ([]*grava.Grava, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGravas")
	ret0, _ := ret[0].([]*grava.Grava)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGravas indicates an expected call of ListGravas
func (mr *MockUseCaseMockRecorder) ListGravas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGravas", reflect.TypeOf((*MockUseCase)(nil).ListGravas))
}

// CreateGrava mocks base method
func (m *MockUseCase) CreateGrava(musica int, artista string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGrava", musica, artista)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGrava indicates an expected call of CreateGrava
func (mr *MockUseCaseMockRecorder) CreateGrava(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGrava", reflect.TypeOf((*MockUseCase)(nil).CreateGrava), musica, artista)
}

// UpdateGrava mocks base method
func (m *MockUseCase) UpdateGrava(e *grava.Grava) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGrava", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGrava indicates an expected call of UpdateGrava
func (mr *MockUseCaseMockRecorder) UpdateGrava(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGrava", reflect.TypeOf((*MockUseCase)(nil).UpdateGrava), e)
}

// DeleteGrava mocks base method
func (m *MockUseCase) DeleteGrava(musica int, artista string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGrava", musica, artista)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGrava indicates an expected call of DeleteGrava
func (mr *MockUseCaseMockRecorder) DeleteGrava(musica, artista interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGrava", reflect.TypeOf((*MockUseCase)(nil).DeleteGrava), musica, artista)
}
